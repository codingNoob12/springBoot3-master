package com.in28minutes.learnspringaop.aopexample.aspects;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.annotation.Configuration;

//Configuration
//AOP
@Configuration
@Aspect
public class LoggingAspect {

	private Logger logger = LoggerFactory.getLogger(getClass());
	
	//Pointcut - when?
	//문법 : execution(* PACKAGE.*.*(..)) => return값과 함수를 지정
	// 어느 패키지의 어떤 클래스의 어떤 함수인지 (괄호안에는 파라미터는 무엇인지)
//	@Pointcut("execution(* com.in28minutes.learnspringaop.aopexample.business.*.*(..))")
	@Before("execution(* com.in28minutes.learnspringaop.aopexample.business.*.*(..))")
	public void logMethodCall(JoinPoint joinPoint) { // 특정 메서드 실행 : JoinPoint
		// Logic - what?
		logger.info("Method is called - {}", joinPoint.getClass());
	}
}
