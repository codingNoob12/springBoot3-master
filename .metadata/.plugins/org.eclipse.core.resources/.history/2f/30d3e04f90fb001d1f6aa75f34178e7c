package com.in28minutes.learnspringsecurity.resources;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.security.access.annotation.Secured;
import org.springframework.security.access.prepost.PostAuthorize;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import jakarta.annotation.security.RolesAllowed;

@RestController
//@CrossOrigin(origins = "http://localhost:3000")
public class TodoResource {
	
	private Logger logger = LoggerFactory.getLogger(getClass());

	private static final List<Todo> TODOS_LIST = List.of(
			new Todo("in28minutes", "Learn Aws"),
			new Todo("in28minutes", "Get AWS Certified"));

	@GetMapping("/todos")
	public List<Todo> retrieveAllTodos() {
		return TODOS_LIST;
	}
	
	// Pre, Post 조건을 만족하지 않으면 403에러
	@GetMapping("/users/{username}/todos")
	// 함수 실행 전에 처리
	// 역할이 USER이고 인증헤더의 이름이 username 파라미터와 동일해야함
	// 오직 자신의 리소스에만 접근 가능
	@PreAuthorize("hasRole('USER') and #username == authentication.name")
	// 함수가 종료될 때 처리
	// 리턴되는 객체의 username이 'in28minutes'와 동일해야함
	@PostAuthorize("returnObject.username == 'in28minutes'")
	//JSR-250 자바 표준 어노테이션
	@RolesAllowed({"ADMIN", "USER"}) // 허용되는 역할을 지정할 수 있음
	//Secured 어노테이션
	@Secured({"ADMIN1", "USER1"}) // 허용되는 역할을 지정할 수 있음 (RolesAllowed와 동)
	public Todo retrieveAllTodosForSpecificUser(@PathVariable String username) {
		return TODOS_LIST.get(0);
	}
	
	@PostMapping("/users/{username}/todos")
	public void createTodoForSpecificUser(@PathVariable String username,
			@RequestBody Todo todo) {
		logger.info("Create {} for {}", todo, username);
	}
}

record Todo (String username, String description) {}