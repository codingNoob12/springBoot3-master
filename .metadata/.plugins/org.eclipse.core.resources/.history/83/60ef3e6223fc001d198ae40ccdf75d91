package com.in28minutes.learnspringaop.aopexample.aspects;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.AfterThrowing;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.annotation.Configuration;

//AOP 용어 정리
// - Complie Time
// 1. Advice : 실행할 코드
// 2. Pointcut : 인터셉트할 메서드를 지정
// 3. Aspect : Advice + Pointcut => 언제 + 무엇을?
// 4. Weaver : AOP를 구현하는 프레임워크 => AspectJ / Spring AOP
// - Runtime
// 1. Join Point : pointcut 조건이 참인 경우, advice가 실행.
				// 이때의 advice의 실행 인스턴스가 Join Point

//Configuration
//AOP
@Configuration
@Aspect
public class LoggingAspect {

	private Logger logger = LoggerFactory.getLogger(getClass());
	
	//Pointcut - when?
	//문법 : execution(* PACKAGE.*.*(..)) => return값과 함수를 지정
	// 어느 패키지의 어떤 클래스의 어떤 함수인지 (괄호안에는 파라미터는 무엇인지)
//	@Pointcut("execution(* com.in28minutes.learnspringaop.aopexample.business.*.*(..))")
	@Before("execution(* com.in28minutes.learnspringaop.aopexample.*.*.*(..))")
	public void logMethodBeforeExecution(JoinPoint joinPoint) { // 특정 메서드 실행 : JoinPoint
		// Logic - what?
//		logger.info("Before Aspect - Method is called - {}", joinPoint);
		logger.info("Before Aspect - {} is called with arguments: {}", 
				joinPoint, joinPoint.getArgs());
	}
	
	@After("execution(* com.in28minutes.learnspringaop.aopexample.*.*.*(..))")
	public void logMethodAfterExecution(JoinPoint joinPoint) {
		logger.info("After Aspect - {} has executed", joinPoint);
	}
	
	@AfterThrowing(
		pointcut = "execution(* com.in28minutes.learnspringaop.aopexample.*.*.*(..))",
		throwing = "exception") // 예외발생시 예외는 throwing으로 주어진 이름으로 매핑
	public void logMethodAfterException(JoinPoint joinPoint, Exception exception) {
		logger.info("After Aspect - {} has executed", joinPoint);
	}
}

// Pointcut
//@Before : 메서드 실행 전
//@After : 메서드 종료 후 (에러 발생 여부와는 무관)
//@AfterReturning : 메서드 성공적으로 종료 후
//@AfterThrowing : 메서드 예외 발생 후
